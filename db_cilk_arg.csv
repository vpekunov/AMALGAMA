0,body,"#include <stdio.h>\n"
1,body,"#include <math.h>\n"
2,body,"#include <omp.h>\n"
3,body,"#pragma auto pure(sqrt)\n"
4,body,"#pragma auto pure(exp,sin)\n"
5,body,"#pragma auto pure(printf)\n"
6,body,"#define PI 3.14159265358\n"
7,body,"#define NX 100\n"
8,body,"#define NY 100\n"
9,body,"#define MaxT 0.001\n"
10,body,"#define h 0.01\n"
11,body,"#define tau 0.00001\n"
12,body,"#define cilk_spawn _Cilk_spawn\n"
13,body,"#define cilk_sync _Cilk_sync\n"
14,arg,x
14,idxs,
14,arg,y
14,idxs,
14,arg,t
14,idxs,
14,arg,*
14,arg,val
14,idxs,
14,args,"double x, double y, double t, double * val"
14,ret,"void "
14,name,F
16,op,"double r = sqrt(x*x + y*y)"
17,op,"double result = 0.0"
18,op,"int i"
19,init,"i = 0"
19,cond,"i < 300"
19,chng,i++
20,op,"result += exp(-r*t)*sin(0.1*i*r + 0.5*PI)"
21,op,"*val = result"
23,args,
23,ret,"int "
23,name,main
25,op,"double f[NY][NX] = {0.0}"
26,op,"double v[NY][NX] = {0.0}"
27,op,"double v1[NY][NX] = {0.0}"
28,op,"double t"
29,op,"int x, y"
30,op,"double start = omp_get_wtime()"
31,init,"t = 0.0"
31,cond,"t < MaxT"
31,chng,"t += tau"
33,init,"y = 1"
33,cond,"y < NY-1"
33,chng,y++
34,init,"x = 1"
34,cond,"x < NX-1"
34,chng,x++
36,op,"F(x*h, y*h, t, &f[y][x])"
37,op,"printf(""F() initialized\\n"")"
38,op,"printf(""in (%i,%i) point\\n"", x, y)"
40,init,"y = 1"
40,cond,"y < NY-1"
40,chng,y++
41,init,"x = 1"
41,cond,"x < NX-1"
41,chng,x++
42,op,"v1[y][x] = v[y][x] + tau*((v[y-1][x]+v[y+1][x]+v[y][x-1]+v[y][x+1]-4.0*v[y][x])/h/h - f[y][x])"
43,init,"y = 1"
43,cond,"y < NY-1"
43,chng,y++
44,init,"x = 1"
44,cond,"x < NX-1"
44,chng,x++
45,op,"v[y][x] = v1[y][x]"
47,init,"y = 0"
47,cond,"y < NY"
47,chng,y++
49,init,"x = 0"
49,cond,"x < NX"
49,chng,x++
50,op,"printf(""%lf "", v[y][x])"
51,op,"printf(""\\n"")"
53,op,"printf(""Total time = %lf\\n"", omp_get_wtime() - start)"
54,arg,0
