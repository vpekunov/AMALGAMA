@versions(Auto)
@global_unique(PROCESS,1):-
  ($)->{END}.
 @auto:-"TERMINII" => "ID".

get_left_top(Left,Top):-
  counter(N),
  N1 is N+1,
  retractall(counter(_)),
  asserta(counter(N1)),
  Left is (N mod 8)*150,
  Top is (N div 8)*100,
  !.

deduce_add_functions(Type,Var,ID2,CID2):-
  e_saddfunction(Type,ID1,Var,_),
  once(insert_link(ID1,'Val',ID2,CID2,'clBlack')),
  fail.

deduce_add_functions(_,_,_,_):-
  !.

deduce_vars:-
  e_svar('Scalar',Name,Ext,Phase,_),
  once(get_left_top(Left, Top)),
  once(((e_svar_control(Name,Phase,_),e_smodel(MID,_))->(insert_link(MID,'Control',Name,'PhasePrm','clBlack'));true)),
  once((e_svar_is(Name,Type,Phase,_)->(insert_link(Phase,Type,Name,'PhasePrm','clBlack'));true)),
  once((e_svar_description(Name,Desc,_)->true;=(Desc,''))),
  once((e_svar_init(Name,Init0,_)->unescape_specs(Init0,Init);=(Init,''))),
  once((e_svar_restrict(Name,Restrict,_)->true;=(Restrict,'Any'))),
  once(insert_element(Name,'clsE_Var','True','True','False',Left,Top,['Init','Restrict','FBase','Desc'],[Init, Restrict, Ext, Desc],['Phase','PhasePrm'],['Calc','Val'])),
  once(insert_link(Phase,'Define',Name,'Phase','clBlack')),
  fail.

deduce_vars:-
  !.

deduce_consts:-
  e_sconst(Name,Expression,_),
  once(get_left_top(Left, Top)),
  once(insert_element(Name,'clsE_Const','True','True','False',Left,Top,['Expression'],[Expression],[],['Val'])),
  fail.

deduce_consts:-
  !.

deduce_substances:-
  e_ssubstance(Name,Substance,Phase,_),
  once(get_left_top(Left, Top)),
  once(insert_element(Name,'clsE_Substance','True','True','False',Left,Top,['Substance'],[Substance],['Phase'],['Calc','Val'])),
  once(insert_link(Phase,'Define',Name,'Phase','clBlack')),
  fail.

deduce_substances:-
  !.

deduce_projections:-
  e_sprojection(Type,Name,Vector,_),
  once(get_left_top(Left, Top)),
  once((e_svar_init(Name,Init0,_)->unescape_specs(Init0,Init);=(Init,''))),
  once((e_svar_restrict(Name,Restrict,_)->true;=(Restrict,'Any'))),
  once(insert_element(Name,'clsE_Projection','True','True','False',Left,Top,['Init','Restrict'],[Init, Restrict],['Vector'],['Calc','Val'])),
  once(insert_link(Vector,Type,Name,'Vector','clBlack')),
  fail.

deduce_projections:-
  !.

deduce_vectors:-
  e_svar('Vector',Name,Ext,Phase,_),
  once(get_left_top(Left, Top)),
  once(((e_svar_control(Name,Phase,_),e_smodel(MID,_))->(insert_link(MID,'Control',Name,'PhasePrm','clBlack'));true)),
  once((e_svar_is(Name,Type,Phase,_)->(insert_link(Phase,Type,Name,'PhasePrm','clBlack'));true)),
  once((e_svar_description(Name,Desc,_)->true;=(Desc,''))),
  once(insert_element(Name,'clsE_Vector','True','True','False',Left,Top,['FBase','Desc'],[Ext, Desc],['Phase','PhasePrm'],['Vx','Vy','Vz'])),
  once(insert_link(Phase,'Define',Name,'Phase','clBlack')),
  fail.

deduce_vectors:-
  !.

deduce_phases:-
  e_sphase(Mode,Name,'1',Model,_),
  once(get_left_top(Left, Top)),
  once(insert_link(Model,Mode,Name,'Model','clBlack')),
  once((e_sphase_uw(Name,Uw,_)->true;=(Uw,'0'))),
  once((e_sphase_source(Name,Source,_)->true;=(Source,''))),
  once(insert_element(Name,'clsE_Phase','True','True','False',Left,Top,['Uw','Source','Nc'],[Uw,Source,'1'],['Model','SourceK','SourceS'],['Ro','Nu','T','U','Define'])),
  once(deduce_add_functions('Right', Name, Name, 'SourceK')),
  once(deduce_add_functions('Base', Name, Name, 'SourceS')),
  fail.

deduce_phases:-
  !.

deduce_multiphases:-
  e_smultiphase(Mode,Name,Nc,Model,_),
  once(get_left_top(Left, Top)),
  once(insert_link(Model,Mode,Name,'Model','clBlack')),
  once((e_sphase_uw(Name,Uw,_)->true;=(Uw,'0'))),
  once((e_sphase_source(Name,Source,_)->true;=(Source,''))),
  once(insert_element(Name,'clsE_MultiPhase','True','True','False',Left,Top,['Uw','Source','Nc'],[Uw,Source,Nc],['Model','SourceK','SourceS'],['Ro','Nu','T','U','Define'])),
  once(deduce_add_functions('Right', Name, Name, 'SourceK')),
  once(deduce_add_functions('Base', Name, Name, 'SourceS')),
  fail.

deduce_multiphases:-
  !.

deduce_functions:-
  e_sfun(Name, Expression0, Phase, _),
  once(unescape_specs(Expression0, Expression)),
  once(get_left_top(Left, Top)),
  once((e_sfun_vars(Name,Vars0,_)->unescape_specs(Vars0,Vars);=(Vars,''))),
  once(insert_element(Name,'clsE_Function','True','True','False',Left,Top,['Vars','Expression'],[Vars, Expression],['Phase'],['Val'])),
  once((=(Phase,'-')->true;(insert_link(Phase,'Define',Name,'Phase','clBlack')))),
  fail.

deduce_functions:-
  !.

deduce_bound_functions:-
  e_sfun(Name, Expression0, Phase, _),
  e_sfun_isbound(Name, Bound, _),
  once(unescape_specs(Expression0, Expression)),
  once(get_left_top(Left, Top)),
  once((e_sfun_vars(Name,Vars0,_)->unescape_specs(Vars0,Vars);=(Vars,''))),
  once(insert_element(Name,'clsE_BoundFunction','True','True','False',Left,Top,['Vars','Expression','Bound'],[Vars, Expression, Bound],['Phase'],['Val'])),
  once((=(Phase,'-')->true;(insert_link(Phase,'Define',Name,'Phase','clBlack')))),
  fail.

deduce_bound_functions:-
  !.

deduce_direct_equations:-
  e_sdirectequation(Var, Handler, _),
  once(randomid(8,ID)),
  once(get_left_top(Left, Top)),
  once(insert_element(ID,'clsE_DirectEquation','True','True','False',Left,Top,['Var','Handler'],[Var, Handler],['Calc','K','Bound'],['Solver'])),
  once(insert_link(Var,'Calc',ID,'Calc','clBlack')),
  once(deduce_add_functions('Right', Var, ID, 'K')),
  once(deduce_add_functions('Bound', Var, ID, 'Bound')),
  fail.

deduce_direct_equations:-
  !.

deduce_common_equations:-
  e_sequation(Var, Handler, NuMol, Kappa, _),
  once(randomid(8,ID)),
  once(get_left_top(Left, Top)),
  once((
    =(Handler, 'NULL')->(=(Class,'clsE_DynEquation'));
    (
     =(Handler, 'PoissonSolver')->(=(Class,'clsE_PoissonEquation'));
     (
      =(Handler, 'SolarSolver')->(=(Class,'clsE_SolarEquation'));
      fail
     )
    )
  )),
  once(insert_element(ID,Class,'True','True','False',Left,Top,['NuMol','Kappa','Handler'],[NuMol, Kappa, Handler],['Calc','K','S','Bound'],['Solver'])),
  once(insert_link(Var,'Calc',ID,'Calc','clBlack')),
  once(deduce_add_functions('Right', Var, ID, 'K')),
  once(deduce_add_functions('Base', Var, ID, 'S')),
  once(deduce_add_functions('Bound', Var, ID, 'Bound')),
  fail.

deduce_common_equations:-
  !.

deduce_whirl_equations:-
  e_swhirlequation(Var, Handler, NuMol, Kappa, _),
  once(randomid(8,ID)),
  once(get_left_top(Left, Top)),
  once(insert_element(ID,'clsE_WhirlEquation','True','True','False',Left,Top,['NuMol','Kappa','Handler'],[NuMol, Kappa, Handler],['Calc','K','S','Bound'],['Solver'])),
  once(insert_link(Var,'Calc',ID,'Calc','clBlack')),
  once(deduce_add_functions('Right', Var, ID, 'K')),
  once(deduce_add_functions('Base', Var, ID, 'S')),
  once(deduce_add_functions('Bound', Var, ID, 'Bound')),
  fail.

deduce_whirl_equations:-
  !.

deduce_modifications:-
  e_smodification(Var, _),
  once(randomid(8,ID)),
  once(get_left_top(Left, Top)),
  once(insert_element(ID,'clsE_Modification','True','True','False',Left,Top,[],[],['Calc','K','S','Bound'],['Solver'])),
  once(insert_link(Var,'Calc',ID,'Calc','clBlack')),
  once(deduce_add_functions('Right', Var, ID, 'K')),
  once(deduce_add_functions('Base', Var, ID, 'S')),
  once(deduce_add_functions('Bound', Var, ID, 'Bound')),
  fail.

deduce_modifications:-
  !.

deduce_solver:-
  e_ssolver(_),
  once(get_left_top(Left, Top)),
  once(randomid(8, ID)),
  once((e_ssolver_fs(Functions0,_)->unescape_specs(Functions0,Functions);=(Functions,''))),
  once(insert_element(ID,'clsE_Solver','True','True','False',Left,Top,['Functions'],[Functions],['Eqtn','Modify'],[])),
  once((
     (
      element(EqID,ClassID,_,_),
      member(ClassID, ['clsE_DirectEquation', 'clsE_DynEquation', 'clsE_PoissonEquation', 'clsE_SolarEquation', 'clsE_WhirlEquation']),
      once(insert_link(EqID,'Solver',ID,'Eqtn','clBlack')),
      fail
     );
     true
  )),
  once((
     (
      element(EqID,'clsE_Modification',_,_),
      once(insert_link(EqID,'Solver',ID,'Modify','clBlack')),
      fail
     );
     true
  )),
  !.

deduce_solver:-
  !.

deduce_smodel:-
  e_smodel(Name,_),
  once(get_left_top(Left, Top)),
  once(insert_element(Name,'clsE_Model','True','True','False',Left,Top,[],[],[],['Carrier','Other','Control'])),
  !.

deduce_smodel:-
  !.

deduce_model:-
  asserta(counter(0)),
  deduce_direct_equations,
  deduce_functions,
  deduce_bound_functions,
  deduce_vars,
  deduce_consts,
  deduce_phases,
  deduce_multiphases,
  deduce_substances,
  deduce_smodel,
  deduce_vectors,
  deduce_common_equations,
  deduce_whirl_equations,
  deduce_modifications,
  deduce_projections,
  deduce_solver,
  !.

prepare:-
  asserta(e_saddfunction('','','','')),
  asserta(e_sdirectequation('','','')),
  asserta(e_sequation('','','','','')),
  asserta(e_swhirlequation('','','','','')),
  asserta(e_sfun('','','','')),
  asserta(e_sfun_isbound('','','')),
  asserta(e_sfun_vars('','','')),
  asserta(e_sconst('','','')),
  asserta(e_smodel('','')),
  asserta(e_smodification('','')),
  asserta(e_smultiphase('','','','','')),
  asserta(e_sphase('','','','','')),
  asserta(e_sphase_source('','','')),
  asserta(e_sphase_uw('','','')),
  asserta(e_sprojection('','','','')),
  asserta(e_ssolver('')),
  asserta(e_ssolver_fs('','')),
  asserta(e_ssubstance('','','','')),
  asserta(e_svar('','','','','')),
  asserta(e_svar_control('','','')),
  asserta(e_svar_description('','','')),
  asserta(e_svar_init('','','')),
  asserta(e_svar_is('','','','')),
  asserta(e_svar_restrict('','','')),
  retractall(e_saddfunction('','','','')),
  retractall(e_sdirectequation('','','')),
  retractall(e_sequation('','','','','')),
  retractall(e_swhirlequation('','','','','')),
  retractall(e_sfun('','','','')),
  retractall(e_sfun_isbound('','','')),
  retractall(e_sfun_vars('','','')),
  retractall(e_sconst('','','')),
  retractall(e_smodel('','')),
  retractall(e_smodification('','')),
  retractall(e_smultiphase('','','','','')),
  retractall(e_sphase('','','','','')),
  retractall(e_sphase_source('','','')),
  retractall(e_sphase_uw('','','')),
  retractall(e_sprojection('','','','')),
  retractall(e_ssolver('')),
  retractall(e_ssolver_fs('','')),
  retractall(e_ssubstance('','','','')),
  retractall(e_svar('','','','','')),
  retractall(e_svar_control('','','')),
  retractall(e_svar_description('','','')),
  retractall(e_svar_init('','','')),
  retractall(e_svar_is('','','','')),
  retractall(e_svar_restrict('','','')).
create_model:-
  consult('autoutil.pl'),
  asserta(pgen_system('')),
  deduce_model,
  telling(TELL),
  told,
  tell('model.xml'),
  write_xml,
  told,
  tell(TELL),
  clear_db.
@goal:-
  prepare,!.
@done:-
  create_model.
